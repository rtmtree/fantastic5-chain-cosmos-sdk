// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fantasfive/stored_team.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StoredTeam struct {
	Index        string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	MwId         string `protobuf:"bytes,2,opt,name=mwId,proto3" json:"mwId,omitempty"`
	Players      string `protobuf:"bytes,3,opt,name=players,proto3" json:"players,omitempty"`
	CaptainIndex string `protobuf:"bytes,4,opt,name=captainIndex,proto3" json:"captainIndex,omitempty"`
	Points       string `protobuf:"bytes,5,opt,name=points,proto3" json:"points,omitempty"`
	Rank         string `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	Owner        string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *StoredTeam) Reset()         { *m = StoredTeam{} }
func (m *StoredTeam) String() string { return proto.CompactTextString(m) }
func (*StoredTeam) ProtoMessage()    {}
func (*StoredTeam) Descriptor() ([]byte, []int) {
	return fileDescriptor_6ddba0f11f788bee, []int{0}
}
func (m *StoredTeam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoredTeam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoredTeam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoredTeam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoredTeam.Merge(m, src)
}
func (m *StoredTeam) XXX_Size() int {
	return m.Size()
}
func (m *StoredTeam) XXX_DiscardUnknown() {
	xxx_messageInfo_StoredTeam.DiscardUnknown(m)
}

var xxx_messageInfo_StoredTeam proto.InternalMessageInfo

func (m *StoredTeam) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *StoredTeam) GetMwId() string {
	if m != nil {
		return m.MwId
	}
	return ""
}

func (m *StoredTeam) GetPlayers() string {
	if m != nil {
		return m.Players
	}
	return ""
}

func (m *StoredTeam) GetCaptainIndex() string {
	if m != nil {
		return m.CaptainIndex
	}
	return ""
}

func (m *StoredTeam) GetPoints() string {
	if m != nil {
		return m.Points
	}
	return ""
}

func (m *StoredTeam) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

func (m *StoredTeam) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*StoredTeam)(nil), "fantasfive.fantasfive.StoredTeam")
}

func init() { proto.RegisterFile("fantasfive/stored_team.proto", fileDescriptor_6ddba0f11f788bee) }

var fileDescriptor_6ddba0f11f788bee = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x4b, 0xcc, 0x2b,
	0x49, 0x2c, 0x4e, 0xcb, 0x2c, 0x4b, 0xd5, 0x2f, 0x2e, 0xc9, 0x2f, 0x4a, 0x4d, 0x89, 0x2f, 0x49,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x45, 0xc8, 0xea, 0x21, 0x98, 0x4a,
	0xdb, 0x18, 0xb9, 0xb8, 0x82, 0xc1, 0x8a, 0x43, 0x52, 0x13, 0x73, 0x85, 0x44, 0xb8, 0x58, 0x33,
	0xf3, 0x52, 0x52, 0x2b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x21, 0x2e,
	0x96, 0xdc, 0x72, 0xcf, 0x14, 0x09, 0x26, 0xb0, 0x20, 0x98, 0x2d, 0x24, 0xc1, 0xc5, 0x5e, 0x90,
	0x93, 0x58, 0x99, 0x5a, 0x54, 0x2c, 0xc1, 0x0c, 0x16, 0x86, 0x71, 0x85, 0x94, 0xb8, 0x78, 0x92,
	0x13, 0x0b, 0x4a, 0x12, 0x33, 0xf3, 0x3c, 0xc1, 0x46, 0xb1, 0x80, 0xa5, 0x51, 0xc4, 0x84, 0xc4,
	0xb8, 0xd8, 0x0a, 0xf2, 0x33, 0xf3, 0x4a, 0x8a, 0x25, 0x58, 0xc1, 0xb2, 0x50, 0x1e, 0xc8, 0xa6,
	0xa2, 0xc4, 0xbc, 0x6c, 0x09, 0x36, 0x88, 0x4d, 0x20, 0x36, 0xc8, 0x4d, 0xf9, 0xe5, 0x79, 0xa9,
	0x45, 0x12, 0xec, 0x10, 0x37, 0x81, 0x39, 0x4e, 0xe6, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78,
	0x2c, 0xc7, 0x10, 0x25, 0x8b, 0x14, 0x0e, 0x15, 0xfa, 0x48, 0x9c, 0x92, 0xca, 0x82, 0xd4, 0xe2,
	0x24, 0x36, 0x70, 0x78, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x97, 0x80, 0x3c, 0x24, 0x2f,
	0x01, 0x00, 0x00,
}

func (m *StoredTeam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredTeam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoredTeam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Rank) > 0 {
		i -= len(m.Rank)
		copy(dAtA[i:], m.Rank)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.Rank)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Points) > 0 {
		i -= len(m.Points)
		copy(dAtA[i:], m.Points)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.Points)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CaptainIndex) > 0 {
		i -= len(m.CaptainIndex)
		copy(dAtA[i:], m.CaptainIndex)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.CaptainIndex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Players) > 0 {
		i -= len(m.Players)
		copy(dAtA[i:], m.Players)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.Players)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MwId) > 0 {
		i -= len(m.MwId)
		copy(dAtA[i:], m.MwId)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.MwId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintStoredTeam(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStoredTeam(dAtA []byte, offset int, v uint64) int {
	offset -= sovStoredTeam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoredTeam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.MwId)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.Players)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.CaptainIndex)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.Points)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovStoredTeam(uint64(l))
	}
	return n
}

func sovStoredTeam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStoredTeam(x uint64) (n int) {
	return sovStoredTeam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredTeam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStoredTeam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredTeam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredTeam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MwId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MwId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptainIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStoredTeam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStoredTeam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStoredTeam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStoredTeam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStoredTeam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStoredTeam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStoredTeam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStoredTeam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStoredTeam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStoredTeam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStoredTeam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStoredTeam = fmt.Errorf("proto: unexpected end of group")
)
